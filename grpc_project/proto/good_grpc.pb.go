// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: proto/good.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodServiceClient is the client API for GoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodServiceClient interface {
	SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStreaming(ctx context.Context, in *NameList, opts ...grpc.CallOption) (GoodService_SayHelloServerStreamingClient, error)
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GoodService_SayHelloClientStreamingClient, error)
	SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GoodService_SayHelloBidirectionalStreamingClient, error)
}

type goodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodServiceClient(cc grpc.ClientConnInterface) GoodServiceClient {
	return &goodServiceClient{cc}
}

func (c *goodServiceClient) SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/good_service.GoodService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodServiceClient) SayHelloServerStreaming(ctx context.Context, in *NameList, opts ...grpc.CallOption) (GoodService_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoodService_ServiceDesc.Streams[0], "/good_service.GoodService/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &goodServiceSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoodService_SayHelloServerStreamingClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type goodServiceSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *goodServiceSayHelloServerStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goodServiceClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GoodService_SayHelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoodService_ServiceDesc.Streams[1], "/good_service.GoodService/SayHelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &goodServiceSayHelloClientStreamingClient{stream}
	return x, nil
}

type GoodService_SayHelloClientStreamingClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*MessageList, error)
	grpc.ClientStream
}

type goodServiceSayHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *goodServiceSayHelloClientStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goodServiceSayHelloClientStreamingClient) CloseAndRecv() (*MessageList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goodServiceClient) SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GoodService_SayHelloBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoodService_ServiceDesc.Streams[2], "/good_service.GoodService/SayHelloBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &goodServiceSayHelloBidirectionalStreamingClient{stream}
	return x, nil
}

type GoodService_SayHelloBidirectionalStreamingClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type goodServiceSayHelloBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *goodServiceSayHelloBidirectionalStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goodServiceSayHelloBidirectionalStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoodServiceServer is the server API for GoodService service.
// All implementations must embed UnimplementedGoodServiceServer
// for forward compatibility
type GoodServiceServer interface {
	SayHello(context.Context, *NoParam) (*HelloResponse, error)
	SayHelloServerStreaming(*NameList, GoodService_SayHelloServerStreamingServer) error
	SayHelloClientStreaming(GoodService_SayHelloClientStreamingServer) error
	SayHelloBidirectionalStreaming(GoodService_SayHelloBidirectionalStreamingServer) error
	mustEmbedUnimplementedGoodServiceServer()
}

// UnimplementedGoodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodServiceServer struct {
}

func (UnimplementedGoodServiceServer) SayHello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGoodServiceServer) SayHelloServerStreaming(*NameList, GoodService_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedGoodServiceServer) SayHelloClientStreaming(GoodService_SayHelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (UnimplementedGoodServiceServer) SayHelloBidirectionalStreaming(GoodService_SayHelloBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStreaming not implemented")
}
func (UnimplementedGoodServiceServer) mustEmbedUnimplementedGoodServiceServer() {}

// UnsafeGoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodServiceServer will
// result in compilation errors.
type UnsafeGoodServiceServer interface {
	mustEmbedUnimplementedGoodServiceServer()
}

func RegisterGoodServiceServer(s grpc.ServiceRegistrar, srv GoodServiceServer) {
	s.RegisterService(&GoodService_ServiceDesc, srv)
}

func _GoodService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good_service.GoodService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodServiceServer).SayHello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NameList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoodServiceServer).SayHelloServerStreaming(m, &goodServiceSayHelloServerStreamingServer{stream})
}

type GoodService_SayHelloServerStreamingServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type goodServiceSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *goodServiceSayHelloServerStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GoodService_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoodServiceServer).SayHelloClientStreaming(&goodServiceSayHelloClientStreamingServer{stream})
}

type GoodService_SayHelloClientStreamingServer interface {
	SendAndClose(*MessageList) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type goodServiceSayHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *goodServiceSayHelloClientStreamingServer) SendAndClose(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goodServiceSayHelloClientStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GoodService_SayHelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoodServiceServer).SayHelloBidirectionalStreaming(&goodServiceSayHelloBidirectionalStreamingServer{stream})
}

type GoodService_SayHelloBidirectionalStreamingServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type goodServiceSayHelloBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *goodServiceSayHelloBidirectionalStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goodServiceSayHelloBidirectionalStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoodService_ServiceDesc is the grpc.ServiceDesc for GoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good_service.GoodService",
	HandlerType: (*GoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GoodService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _GoodService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _GoodService_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStreaming",
			Handler:       _GoodService_SayHelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/good.proto",
}
